<?php
// $Id$
/**
* @file
* Lets users add private annotations to nodes.
*
* Adds a text field when a node is displayed
* so that authenticated users may make notes.
*/

/**
* Implementation of hook_menu().
*/
function annotate_menu() {	//This is the menu Hook, creates menu in admin

//the following creates new category in admin for our module
$items['admin/annotate'] = array(
'title' => 'Node annotation',
'description' => 'Adjust node annotation options.',
'position' => 'right',
'weight' => -5,
'page callback' => 'system_admin_menu_block_page',
'access arguments' => array('administer site configuration'),

/*Drupal loads only the files that are necessary to complete a request. This saves on memory
usage. Because our page callback points to a function that is outside the scope of our
module (i.e., the function system_admin_menu_block_page() in system.module), we need to tell
Drupal to load the file modules/system/system.admin.inc instead of trying to load sites/all/
modules/custom/annotate/system.admin.inc.We did that by telling Drupal to get the path of
the system module and put the result in the file path key of our menu item.

------List of paths to admin categories-------
admin/content Content management
admin/build Site building
admin/settings Site configuration
admin/user User management
admin/reports Reports
*/
'file' => 'system.admin.inc',
'file path' => drupal_get_path('module', 'system'),
);

$items['admin/annotate/settings'] = array(
'title' => 'Annotation settings',	//this appears at Admin Menu under Site Config
'description' => 'Change how annotations behave.',	//Description
'page callback' => 'drupal_get_form',	//calls this function
'page arguments' => array('annotate_admin_settings'),	//pass in these arg
'access arguments' => array('administer site configuration'),//Permission of ppl to access
'type' => MENU_NORMAL_ITEM,
'file' => 'annotate.admin.inc',	//look for this file
);




return $items;
}

/**
* Implementation of hook_nodeapi().
*/

//nodeapi hook is called when drupal doing various things with a node. 
//$node: it's a reference so what changes we make will apply to real.
//$op:possible values, insert - when node being created, delete - when node being deleted, view - when it's been prepared to be viewed

function annotate_nodeapi(&$node, $op, $teaser, $page) {
global $user;
switch ($op) {
// The 'view' operation means the node is about to be displayed.
case 'view':
// Abort if the user is an anonymous user (not logged in) or
// if the node is not being displayed on a page by itself
// (for example, it could be in a node listing or search result).
if ($user->uid == 0 || !$page) {
break;
}
// Find out which node types we should annotate.
//'page is used in case when the person still havnt visited admin page to select yet.'
$types_to_annotate = variable_get('annotate_nodetypes', array('page'));

// Abort if this node is not one of the types we should annotate.
//If the node we working with is the type in $type_to_annotate
if (!in_array($node->type, $types_to_annotate)) {
break;
}

// Get the current annotation for this node from the database
// and store it in the node object.
$result = db_query('SELECT note FROM {annotations} WHERE nid = %d
AND uid = %d', $node->nid, $user->uid);
//db_result gets only the first field of the first row from result set, we use this because since one user is allow only one note
$node->annotation = db_result($result);

// Add our form as a content item. $node needed to be passed in to get any previous annotation and prefill form with it
$node->content['annotation_form'] = array(
'#value' => drupal_get_form('annotate_entry_form', $node),
'#weight' => 10
);
break;

//when post is deleted , remove annotation from database
case 'delete':
db_query('DELETE FROM {annotations} WHERE nid = %d', $node->nid);
break;
}
}

/**
* Define the form for entering an annotation.
*/
//$form_state is passed automatically by Drupal to all forum functions, 
function annotate_entry_form($form_state, $node) {
// Define a fieldset.
$form['annotate'] = array(
'#type' => 'fieldset',
'#title' => t('Annotations'),
);
// Define a textarea inside the fieldset. the reason for $form['annotate']['note'] is that you can let fieldset know note is also within this fieldset
$form['annotate']['note'] = array(
'#type' => 'textarea',
'#title' => t('Notes'),
'#default_value' => isset($node->annotation) ? $node->annotation : '',//if exist annotation exist, then display, else display empty
'#description' => t('Make your personal annotations about this content here.
Only you (and the site administrator) will be able to see them.')
);
// For convenience, save the node ID.
$form['annotate']['nid'] = array(
'#type' => 'value',
'#value' => $node->nid,
);
// Define a submit function.
$form['annotate']['submit'] = array(
'#type' => 'submit',
'#value' => t('Update'),
);
return $form;
}

/**
* Handle submission of the annotation form and saving
* of the data to the database.
*/
function annotate_entry_form_submit($form, $form_state) {
global $user;
$note = $form_state['values']['note'];
$nid = $form_state['values']['nid'];
db_query('DELETE FROM {annotations} WHERE nid = %d AND uid = %d',
$nid, $user->uid);
db_query("INSERT INTO {annotations} (nid, uid, note, created) VALUES
(%d, %d, '%s', %d)", $nid, $user->uid, $note, time());

//%d is for digits, %s is for strings

//set_message outputs the message as a notice
drupal_set_message(t('Your annotation has been saved.'));
}